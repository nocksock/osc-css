:where(*) {
  /**
    TODO: add iteration-delay (post envelope delay)
    TODO: add pulse wave (maybe with slope?)
    TODO: phase (for sin wave (in sin()))
    TODO: phase-offset (for each ball)
    TODO: add --osc-x (0 to 1 for total amount) 
  **/
  --_osc-time-unit: 1s;
  --_osc-state: var(--osc-state, running);
  --_osc-amp-iterations: var(--osc-amp-iterations, infinite);

  --_osc-global-frequency: var(--osc-frequency, 1);
  --_osc-tri-frequency: var(--osc-tri-frequency, var(--_osc-global-frequency));
  --_osc-saw-frequency: var(--osc-saw-frequency, var(--_osc-global-frequency));

  --_osc-phase:  var(--osc-phase, 0s);

  --_osc-delay-amount:  var(--osc-delay,  0);
  --_osc-attack-amount: var(--osc-attack, 2);
  --_osc-hold-amount:   var(--osc-hold,   1);
  --_osc-decay-amount:  var(--osc-decay,  1);

  --_osc-env-total: calc(
    var(--_osc-delay-amount) + 
    var(--_osc-attack-amount) + 
    var(--_osc-hold-amount) + 
    var(--_osc-decay-amount)
  );
  
  --_osc-delay-start:   calc( var(--_osc-delay-amount)  / var(--_osc-env-total) * 100%);
  --_osc-attack-start:  calc((var(--_osc-delay-amount)  + var(--_osc-attack-amount)) / var(--_osc-env-total) * 100%);
  --_osc-hold-start:    calc((var(--_osc-attack-amount) + var(--_osc-hold-amount))   / var(--_osc-env-total) * 100%);
  --_osc-decay-start:   calc( var(--_osc-hold-start));

  --_osc-envelope-ahd: linear(0 0%, 
      0 var(--_osc-delay-start),
      1 var(--_osc-attack-start),
      1 var(--_osc-hold-start),
      1 var(--_osc-decay-start),
      0 
    );

  --_osc-envelope: var(--osc-envelope, var(--_osc-envelope-ahd));

  --osc: 
    calc(var(--_osc-env-total) * var(--_osc-time-unit)) var(--_osc-envelope) var(--_osc-phase) forwards var(--_osc-amp-iterations) osc-amp var(--_osc-state),
    calc(1s/ var(--_osc-saw-frequency)) linear var(--_osc-phase) infinite osc-saw var(--_osc-state),
    calc(1s/ var(--_osc-tri-frequency)) linear var(--_osc-phase) alternate infinite osc-tri var(--_osc-state)
  ;

  --osc-sin: calc(sin(var(--osc-saw) * pi ));
  --osc-cos: calc(cos(var(--osc-saw) * pi ));

  /* - normalised oscillators - */
  --osc-SIN: calc((1 + var(--osc-sin)) / 2);
  --osc-COS: calc((1 + var(--osc-cos)) / 2);
  --osc-SAW: calc((1 + var(--osc-saw)) / 2);
  --osc-TRI: calc((1 + var(--osc-tri)) / 2);
}

/* TODO: declare missing properties (makes it easier to debug) */
/* - wave forms - */
@property --osc-tri            { syntax: "<number>"  ; initial-value: 0 ; inherits: true ; }
@property --osc-saw            { syntax: "<number>"  ; initial-value: 0 ; inherits: true ; }
@property --osc-amp            { syntax: "<number>"  ; initial-value: 0 ; inherits: true ; }

@keyframes osc-tri { from { --osc-tri: -1; } to { --osc-tri:  1; } }
@keyframes osc-saw { from { --osc-saw: -1; } to { --osc-saw:  1; } }
@keyframes osc-amp { from { --osc-amp:  0; } to { --osc-amp:  1; } }


/* ;--: amp envelope ; */
@property --osc-attack         { syntax: "<number>"  ; initial-value: 0 ; inherits: true ; }
@property --osc-delay          { syntax: "<number>"  ; initial-value: 0 ; inherits: true ; }
@property --osc-hold           { syntax: "<number>"  ; initial-value: 0 ; inherits: true ; }
@property --osc-decay          { syntax: "<number>"  ; initial-value: 0 ; inherits: true ; }

@property --_osc-env-total     { syntax: "<number>"  ; initial-value: 0 ; inherits: true ; }
@property --_osc-delay-amount  { syntax: "<number>"  ; initial-value: 0 ; inherits: true ; }
@property --_osc-attack-amount { syntax: "<number>"  ; initial-value: 0 ; inherits: true ; }
@property --_osc-hold-amount   { syntax: "<number>"  ; initial-value: 0 ; inherits: true ; }
@property --_osc-decay-amount  { syntax: "<number>"  ; initial-value: 0 ; inherits: true ; }

@property --_osc-delay-start   { syntax: "<percent>" ; initial-value: 0 ; inherits: true ; }
@property --_osc-attack-start  { syntax: "<percent>" ; initial-value: 0 ; inherits: true ; }
@property --_osc-hold-start    { syntax: "<percent>" ; initial-value: 0 ; inherits: true ; }
@property --_osc-decay-start   { syntax: "<percent>" ; initial-value: 0 ; inherits: true ; }
